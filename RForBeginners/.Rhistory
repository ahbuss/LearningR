add2 <- function(x, y) {
return x + y
}
add2 <- function(x, y) {
x + y
}
add2 <- function(x, y) {
x + y
}
add2(6, 7)
above10 <- function(x) {
xgt10 <- x > 10
x[xgt10]
}
z = 1:30
above10(z)
above <- function(x, n) {
xgtn <- x > n
return x[xgtn]
}
above <- function(x, n) {
xgtn <- x > n
x[xgtn]
}
above <- function(x, n) {
xgtn <- x > n
x[xgtn]
}
above(1:100, 90)
above <- function(x, n = 10) {
xgtn <- x > n
x[xgtn]
}
above(1:40)
above(1:40, 30)
columnmean <- function(y) {
nc <- ncol(y)
}
x = matrix(1:50, 10, 5)
x
columnmean(x)
columnmean <- function(y) {
nc <- ncol(y)
nc
}
columnmean(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[i,])
}
means
}
columnmean(x)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[i,])
}
means
}
x
x[1,1] = NA
x
columnmean(x)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[i,])
}
means
}
columnmean(x)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[i,], na.rm = removeNA)
}
means
}
columnmean(x)
columnmean(x, F)
x=10.5
x
class(x)
k=1
k
class(k)
is.integer(k)
k=as.integer(k)
class(k)
is.integer(k)
v=c(1,2,4,7,1)
v
is.vector(k)
class(v)
v=(TRUE,TRUE,FALSE)
w=(TRUE,TRUE,FALSE)
v=c(TRUE,TRUE,FALSE)
v
class(v)
v=c(TRUE,4,"Hi Mom!")
class(v)
length(v)
w=c(2,3,4,5)
w
c(w,v)
length(c(w,v))
z=(2:4)
z
mtcars
mtcars
mtcars[1,]
mtcars[,1]
mtcars[,0]
mtcars[,10]
mtcars["Honda Civic",]
head(mtcars)
mtcars[[9]]
mtcars[[1]]
mtcars["cyl"]
mtcars$hp
L=mtcars$am=0
L
L=mtcars$am==0
L
mtcars
L=mtcars$am==0
L
getwd()
niin = read.csv("./svn/WIOM/WIOMSim/WIOM (by NIIN)/83_85_Consumables/NIIN.csv")
niin
head(niin)
library(MASS)
painters
painters$School
help(painters)
school=painters$School
school.freq = table(school)
school.freq
cbind(school.freq)
comp=painters$Composition
comp.freq=table(comp)
comp.freq
cbind(comp.freq)
school.relfreq = school.freq / nrow(painters)
school.relfreq
comp.relfreq = comp.freq / length(comp.freq)
comp.relfreq
school.relfreq = school.freq / length(school.freq)
school.relfreq
sum(school.freq)
school.relfreq = school.freq / sum(school.freq)
school.relfreq
comp.relfreq = comp.freq / sum(comp.freq)
comp.relfreq
barplot(school.freq)
plot=!!
;
plot=barplot(school.freq)
plot
library(ggplot2)
library(gridExtra)
dat <- tibble(time = 1:20,
demand = rep(0,20))
dat$demand[2] <- 1
dat$demand[4] <- 1
dat$demand[5] <- 2
dat$demand[12] <- 1
dat$demand[15] <- 2
histData <- dat %>%
mutate(period = ifelse(demand > 0, 1, 0),
period = cumsum(period)) %>%
group_by(period) %>%
summarize(ArrivalTime = n())
demandProb <-
tibble(Demand = c(TRUE, FALSE),
Prob = c(length(which(dat$demand > 0)) / length(dat$demand),
1 - length(which(dat$demand > 0)) / length(dat$demand)))
newSamples2 <- tibble(ArrivalTime =
rnbinom(100, 1, prob = filter(demandProb, Demand)$Prob[1]))
dat <- dplyr::bind_rows(mutate(newSamples2, Type = "Generated"), mutate(histData, Type = "Historical"))
install.packages("dpylr")
installed.packages()
demandProb <-
tibble(Demand = c(TRUE, FALSE),
Prob = c(length(which(dat$demand > 0)) / length(dat$demand),
1 - length(which(dat$demand > 0)) / length(dat$demand)))
installed.packages()
remove.packages(c("tibble", "tibbletime"))
remove.packages(c("tibble", "tibbletime", "dplyr"))
installed.packages()
install.packages("dplyr")
installed.packages()
install.packages("devtools")
library(devtools)
build()
ip <- as.data.frame(installed.packages())
head(ip)
path.lib <- unique(ip$LibPath)
path.lib
packageVersion("dplyr")
```
dplyr::tibble
function (...)
{
xs <- quos(..., .named = TRUE)
as_tibble(lst_quos(xs, expand = TRUE))
}
<environment: namespace:tibble>
```
dplyr::tibble
function (...)
{
xs <- quos(..., .named = TRUE)
as_tibble(lst_quos(xs, expand = TRUE))
}
<environment: namespace:tibble>
function (...)
{
xs <- quos(..., .named = TRUE)
as_tibble(lst_quos(xs, expand = TRUE))
}
install.packages("Rcpp")
install.packages("Rcpp")
installed.packages("Rcpp")
dplyr::tibble
function (...)
{
xs <- quos(..., .named = TRUE)
as_tibble(lst_quos(xs, expand = TRUE))
}
installed.packages("Rcpp")
installed.packages("dplyr")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
installed.packages("devtools")
devtools::install_github("tidyverse/dplyr"
)
newSamples2 <- tibble(ArrivalTime =
rnbinom(100, 1, prob = filter(demandProb, Demand)$Prob[1]))
dat <- dplyr::bind_rows(mutate(newSamples2, Type = "Generated"), mutate(histData, Type = "Historical"))
installed.packages("dplyr")
installed.packages()
devtools::install_github("tidyverse/dplyr"
)
demandProb <-
tibble(Demand = c(TRUE, FALSE),
Prob = c(length(which(dat$demand > 0)) / length(dat$demand),
1 - length(which(dat$demand > 0)) / length(dat$demand)))
dplyr::tibble
tibble::tibble
demandProb <-
tibble::tibble(Demand = c(TRUE, FALSE),
Prob = c(length(which(dat$demand > 0)) / length(dat$demand),
1 - length(which(dat$demand > 0)) / length(dat$demand)))
dat <- tibble::tibble(time = 1:20,
demand = rep(0,20))
dat <- tibble::tibble(time = 1:20,
demand = rep(0,20))
dat
dat
dat$demand
dat$demand[2] <- 1
dat$demand
dat <= tibble(time = 1:20, demand = rep(0,20))
library(tibble)
histData <- dat %>%
mutate(period = ifelse(demand > 0, 1, 0),
period = cumsum(period)) %>%
group_by(period) %>%
summarize(ArrivalTime = n())
histData <- dat %>%
mutate(period = ifelse(demand > 0, 1, 0),
period = cumsum(period)) %>%
group_by(period) %>%
summarize(ArrivalTime = n())
installed.packages("magrittr")
install.packages(magrittr)
install.packages("magrittr")
dat$demand[5] <- 2
dat
library(dplyr)
library(dplyr)
library(dplyr)
source('~/git/LearningR/scripts/DemandDistributionGenerationScript2.R')
library(ggplot2)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(tibble)
dat <- tibble::tibble(time = 1:20,
demand = rep(0,20))
dat$demand[2] <- 1
dat$demand[4] <- 1
dat$demand[5] <- 2
dat$demand[12] <- 1
dat$demand[15] <- 2
histData <- dat %>%
mutate(period = ifelse(demand > 0, 1, 0),
period = cumsum(period)) %>%
group_by(period) %>%
summarize(ArrivalTime = n())
demandProb <-
tibble::tibble(Demand = c(TRUE, FALSE),
Prob = c(length(which(dat$demand > 0)) / length(dat$demand),
1 - length(which(dat$demand > 0)) / length(dat$demand)))
newSamples2 <- tibble(ArrivalTime =
rnbinom(100, 1, prob = filter(demandProb, Demand)$Prob[1]))
dat <- dplyr::bind_rows(mutate(newSamples2, Type = "Generated"), mutate(histData, Type = "Historical"))
p1 <- ggplot(dat, aes(x = ArrivalTime, y = ..density.., fill = Type)) +
geom_histogram(color = 'black', alpha = .5)
p2 <- ggplot(dat, aes(x = ArrivalTime, y = ..density.., fill = Type)) +
geom_density(color = 'black', alpha = .5)
gridExtra::grid.arrange(p1, p2, ncol = 2)
source('~/git/LearningR/scripts/DemandDistributionGenerationScript2.R')
dat
dat <- tibble(time = 1:20,
demand = rep(0,20))
dat
dat$demand[2] <- 1
dat$demand[4] <- 1
dat$demand[5] <- 2
dat$demand[12] <- 1
dat$demand[15] <- 2
dat
histData <- dat %>%
mutate(period = ifelse(demand > 0, 1, 0),
period = cumsum(period)) %>%
group_by(period) %>%
summarize(ArrivalTime = n())
demandProb <-
tibble::tibble(Demand = c(TRUE, FALSE),
Prob = c(length(which(dat$demand > 0)) / length(dat$demand),
1 - length(which(dat$demand > 0)) / length(dat$demand)))
histData
demandProb
newSamples2 <- tibble(ArrivalTime =
rnbinom(100, 1, prob = filter(demandProb, Demand)$Prob[1]))
newSamples2
dat <- dplyr::bind_rows(mutate(newSamples2, Type = "Generated"), mutate(histData, Type = "Historical"))
dat
p1 <- ggplot(dat, aes(x = ArrivalTime, y = ..density.., fill = Type)) +
geom_histogram(color = 'black', alpha = .5)
p2 <- ggplot(dat, aes(x = ArrivalTime, y = ..density.., fill = Type)) +
geom_density(color = 'black', alpha = .5)
gridExtra::grid.arrange(p1, p2, ncol = 2)
library(dplyr)
library(dplyr)
dat
library(dplyr)
dat <- tibble::tibble(time = 1:20,
demand = rep(0,20))
dat$demand[2] <- 1
dat
sourec("/Users/ahbuss/git/LearningR/scripts/DemandDistributionGenerationScript2.R")
source("/Users/ahbuss/git/LearningR/scripts/DemandDistributionGenerationScript2.R")
source("/Users/ahbuss/git/LearningR/scripts/DemandDistributionGenerationScript2.R")
source("/Users/ahbuss/git/LearningR/scripts/DemandDistributionGenerationScript2.R")
dat$demand[2] <- 1
source("/Users/ahbuss/git/LearningR/scripts/DemandDistributionGenerationScript2.R")
dat <- tibble::tibble(time = 1:20,
demand = rep(0,20))
library(dplyr)
source("/Users/ahbuss/git/LearningR/scripts/DemandDistributionGenerationScript2.R")
source("/Users/ahbuss/git/LearningR/scripts/DemandDistributionGenerationScript2.R")
cwd()
pwd()
setwd("~/git/LearningR/RForBeginners")
getwd()
ls()
ls.str()
rm(above)
ls()
rm(above10, add2, columnmean(, x))
rm(above10, add2, columnmean,x
)
ls
ls()
rm(z)
ls()
n <- 3 + rnorm()
n <- 3 + rnorm()
n <- 3 + rnorm(1)
n
n1 <- 10
n2 <- 100
m <- .5
M <- data.frame(n1, n2, m)
ls.str(pat="M")
mode(m)
length(m)
comp <- TRUE
mode(comp)
x <- NA
x
mode(x)
x <- 1.
mode(x)
x <- NA
mode(x)
x <- Inf
x
mode(x)
x <- NaN
mode(x)
x <- 0/0
x
5 /3
truman <- read.table("~/Documents/truman.csv", header=TRUE, sep=",")
truman
truman <- read.table("~/Documents/truman.csv", header=TRUE, sep=",", nrows = 7)
truman <- read.table("~/Documents/truman.csv", header=TRUE, sep=",", ncols = 7)
truman <- read.table("~/Documents/truman.csv", header=FALSE, sep=",", ncols = 7)
truman <- read.table("~/Documents/truman.csv", header=FALSE, sep=",")
truman
truman <- read.csv("~/Documents/truman.csv", header=FALSE, sep=",")
truman
truman <- read.csv("~/Documents/truman.csv", header=TRUE, sep=",")
trunam
truman
x <- 1:30
x
x - 1
x
x[1:10]-1
x
